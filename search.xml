<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hadoop整合spark框架</title>
      <link href="/2022/06/02/hadoop%E6%95%B4%E5%90%88spark%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/06/02/hadoop%E6%95%B4%E5%90%88spark%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="hadoop整合spark的安装与配置"><a href="#hadoop整合spark的安装与配置" class="headerlink" title="hadoop整合spark的安装与配置"></a>hadoop整合spark的安装与配置</h1><p>书接上篇hadoop集群</p><p>由于服务器已经安装了hadoop集群，所以运行spark就用spark on yarn模式了，把资源调度交给yarn。</p><p><a href="https://blog.csdn.net/lichao1618/article/details/124023499">spark部署模式</a></p><h2 id="安装spark"><a href="#安装spark" class="headerlink" title="安装spark"></a>安装spark</h2><p><a href="https://mirrors.cnnic.cn/apache/spark/">spark镜像</a></p><p>将spark安装包上传到<code>/usr/local/</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">sudo tar -zvxf spark-3.2.1-bin-hadoop3.2.tgz</span><br><span class="line">sudo mv spark-3.2.1-bin-hadoop3.2 /spark  # 文件夹改名</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改<code>/usr/local/hadoop/etc/hadoop/yarn-site.xml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/hadoop/etc/hadoop/yarn-site.xml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下内容</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改spark配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">vim conf/spark-env.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下内容</span></span><br><span class="line">JAVA_HOME=/usr/local/devtools/jdk-11.0.15.1 # jdk目录</span><br><span class="line">HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop # hadoop配置目录</span><br><span class="line">YARN_CONF_DIR=/usr/local/hadoop/etc/hadoop </span><br></pre></td></tr></table></figure><p>上传jar包到hdfs文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">hadoop fs -mkdir /spark</span><br><span class="line">hadoop fs -put ./jars /spark</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">时间较长耐心等待</span></span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行命令</span></span><br><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">./examples/jars/spark-examples_2.12-3.2.1.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>打开yarn ui即可看到运行结果</p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220602112807551.png" alt="image-20220602112807551"></p><p>点开程序查看日志即可看到结果</p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220602112859137.png" alt="image-20220602112859137"></p><h2 id="常见问题总结"><a href="#常见问题总结" class="headerlink" title="常见问题总结"></a>常见问题总结</h2><h3 id="运行时一直上传文件，最后TimeOutException"><a href="#运行时一直上传文件，最后TimeOutException" class="headerlink" title="运行时一直上传文件，最后TimeOutException"></a>运行时一直上传文件，最后TimeOutException</h3><p>运行examples的jar时一直上传依赖文件导致时间超时；把spark目录下的jars文件夹内所有jar包上传到hdfs文件系统即可。</p><h3 id="spark提交自己上传的jar包时，ClassNotFoundException"><a href="#spark提交自己上传的jar包时，ClassNotFoundException" class="headerlink" title="spark提交自己上传的jar包时，ClassNotFoundException"></a>spark提交自己上传的jar包时，ClassNotFoundException</h3><p>jar文件没有目标class文件；idea中将项目编译一下再用maven打包即可：</p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220602113819951.png" alt="image-20220602113819951"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 环境搭建 </category>
          
          <category> linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> linux </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器搭建hadoop集群思路与报错整理</title>
      <link href="/2022/05/25/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E6%80%9D%E8%B7%AF%E4%B8%8E%E6%8A%A5%E9%94%99%E6%95%B4%E7%90%86/"/>
      <url>/2022/05/25/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E6%80%9D%E8%B7%AF%E4%B8%8E%E6%8A%A5%E9%94%99%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="云服务器搭建hadoop集群思路与报错整理"><a href="#云服务器搭建hadoop集群思路与报错整理" class="headerlink" title="云服务器搭建hadoop集群思路与报错整理"></a>云服务器搭建hadoop集群思路与报错整理</h1><p>我的版本：hadoop：3.2.3      jdk: 11   centOS：7.6</p><p>建议在配置之前全部打一个快照方便出错搞混或者解决不了时回滚！为了避免后续启动集群各种各样连接超时，连接错误，禁止访问等问题，需在云服务器商提供的控制台开放所有端口。</p><p><strong>大纲</strong></p><ul><li><a href="#h1">创建hadoop用户与程序准备</a><ul><li><a href="#h-1">创建hadoop用户与主机名配置</a></li><li><a href="#h1-2">配置ssh免密登录</a></li><li><a href="#h1-3">xsync文件分发脚本（尚硅谷）</a></li></ul></li><li><a href="#h2">安装jdk</a></li><li><a href="#h3">安装hadoop</a></li><li><a href="#h4">集群配置</a></li><li><a href="#h5">集群启动</a></li><li><a href="#h6">报错与处理办法</a></li></ul><h2 id="h1">创建hadoop用户与程序准备</h2><h3 id="h1-1">创建hadoop用户与主机名配置</h3><p>我将使用三台云服务器搭建一个一主两从的服务器集群，搭建前先使用xshell或者其他连接工具连接上三台云服务器，选定一台配置较高的服务器当做主服务器（Master），（Master：2核4G，Slave1: 1核2G，Slave2：1核2G）。先配置Master在配置其他两台从机。</p><p>租服务器时不做设置登录上都是root用户，在xshell上执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m hadoop -s /bin/bash   # 创建新用户hadoop</span><br></pre></td></tr></table></figure><p>修改hadoop用户密码，两遍确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd hadoop      </span><br></pre></td></tr></table></figure><p>为hadoop用户增加管理员权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><p>编辑页面按下<code>:100</code>然后按下<code>i</code>在root那一行下添加一行<code>hadoop  ALL=(ALL)       ALL</code></p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525183337888.png" alt="image-20220525183337888"></p><p><code>esc</code>然后<code>:wq</code>保存</p><p>在每一台机器创建hadoop用户</p><p><strong>配置主机名</strong></p><p>为了后续搭建集群和配置更简单直观，改一下主机名，并配置hosts文件。云服务器集群和虚拟机集群的hosts配置有所不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname   # 修改主机名</span><br></pre></td></tr></table></figure><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525184907212.png" alt="image-20220525184907212"></p><p><strong>注：</strong>主服务器改为Master，其他两台为Slave1和Slave2并且不能有空格</p><p>配置hosts文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts         # 注意每台机器的hosts都不一样</span><br></pre></td></tr></table></figure><p><strong>Master的hosts文件追加</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">内网ip  Master  Master</span><br><span class="line">外网ip  Slave1  Slave1</span><br><span class="line">外网ip  Slave2  Slave2</span><br></pre></td></tr></table></figure><p>内网ip可以通过<code>ifconfig</code>查看（如下192.168.0.4），外网ip即连接xshell的ip</p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525185712355.png" alt="image-20220525185712355"></p><p>不能出现<code>127.0.0.1 Master</code>这样的记录</p><p><strong>Slave1上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">内网ip  Slave1  Slave1</span><br><span class="line">外网ip  Master  Master</span><br><span class="line">外网ip  Slave2  Slave2</span><br></pre></td></tr></table></figure><p>其他从机同理</p><p><strong>重启三台云服务器</strong></p><p>重启后即可用xshell连接每台的hadoop用户</p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525190341634.png" alt="image-20220525190341634"></p><p><strong>在每台机器上ping其他节点看是否成功</strong></p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525190550081.png" alt="image-20220525190550081"></p><p>没ping通再检查一边配置或者重新配置。</p><h2 id="h1-2">配置ssh免密登录</h2><p>之后的操作默认都在hadoop用户下操作。</p><p>CentOS默认安装有SSH使用命令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep ssh</span><br></pre></td></tr></table></figure><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525192617321.png" alt="image-20220525192617321"></p><p>未安装执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install openssh-clients</span><br><span class="line">sudo yum install openssh-server</span><br></pre></td></tr></table></figure><p>执行命令测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost   # 如果可以登录 使用exit退出</span><br></pre></td></tr></table></figure><p>在Master节点生成公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh               # 如果没有该目录，先执行一次ssh localhost</span><br><span class="line">rm ./id_rsa*            # 删除之前生成的公匙（如果有）</span><br><span class="line">ssh-keygen -t rsa       # 一直按回车就可以</span><br></pre></td></tr></table></figure><p>让Master无密码ssh本机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ./id_rsa.pub &gt;&gt; ./authorized_keys  # 执行后使用 ssh Master 验证</span><br></pre></td></tr></table></figure><p>分发公钥给所有从节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub hadoop@Slave1:/home/hadoop/  # 其他从节点同理</span><br></pre></td></tr></table></figure><p><strong>在从节点上将ssh公钥授权（Slave1为例）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh       # 如果不存在该文件夹需先创建，若已存在则忽略</span><br><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">rm ~/id_rsa.pub    # 用完就可以删掉了</span><br></pre></td></tr></table></figure><p>在Master上测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh Slave1   </span><br></pre></td></tr></table></figure><blockquote><p>如果还是连不上，在每台从机上执行如下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">chmod 700 ../</span><br><span class="line">chmod 700 .</span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525193633677.png" alt="image-20220525193633677"></p><h2 id="h1-3">xsync文件分发脚本（尚硅谷）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/bin  # 如果提示找不到路径 先执行mkdir ~/bin再执行cd 命令</span><br><span class="line">vim xsync # 加入下面的脚本</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then </span><br><span class="line">echo Not Enough Arguement</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 遍历集群所有机器</span></span><br><span class="line">for host in Slave1 Slave2</span><br><span class="line">do </span><br><span class="line">echo ===================== $host =====================</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 遍历所有目录，挨个发送</span></span><br><span class="line"></span><br><span class="line">for file in $@</span><br><span class="line">do </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4. 判断文件是否存在</span></span><br><span class="line">if [ -e $file ]</span><br><span class="line">then </span><br><span class="line">#5. 获取父目录</span><br><span class="line">pdir=$(cd -p $(dirname $file); pwd)</span><br><span class="line"></span><br><span class="line">#6. 获取当前文件的名称</span><br><span class="line">fname=$(basename $file)</span><br><span class="line">ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line">rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">else </span><br><span class="line">echo $file does not exists!</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>保存退出</p><p><strong>添加环境变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 xsync # 增加文件可执行权限</span><br><span class="line">vim ~/.bashrc # 添加一行 export PATH=$PATH:/home/hadoop/bi</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><blockquote><p>如果想在root用户或者其他用户下也能使用，其他环境变量同理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></blockquote><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">xsync bin # 向从节点发送bin目录</span><br><span class="line">ssh Slave1</span><br><span class="line">cd ~</span><br><span class="line">ll        # 如果看到bin目录就成功了</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><blockquote><p>如果提示错误信息：<code>rsync common not found</code></p><p>执行如下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install rsync -y </span><br></pre></td></tr></table></figure></blockquote><h2 id="h2">安装jdk</h2><p>下载地址：<a href="https://www.oracle.com/java/technologies/downloads/#java11">oracle</a></p><p>在Master上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mkdir devtools  # 开发工具目录</span><br></pre></td></tr></table></figure><p>下载完成通过把xftp或者其他工具上传压缩包到<code>devtools</code>目录</p><p>解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zvxf jdk-11.0.15.1_linux_bin.tar.gz</span><br></pre></td></tr></table></figure><p>添加环境变量(开发环境最好加到全局环境变量里面，所有用户都能使用)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile # 增加如下环境变量</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JAVA Environment</span></span><br><span class="line">export JAVA_HOME=/usr/local/devtools/jdk-11.0.15.1</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile # 使生效</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">java -version</span><br><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure><p><strong>分发给所有节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">xsync devtools/   # 分发到节点</span><br></pre></td></tr></table></figure><p><strong>在所有从节点上配置JAVA环境变量并验证</strong></p><h2 id="h3">安装hadoop</h2><p>下载地址：<a href="https://mirrors.cnnic.cn/apache/hadoop/common/">镜像站</a></p><p>Master上，上传压缩包到<code>/usr/local</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /sur/local</span><br><span class="line">sudo tar -zxf hadoop-3.2.3.tar.gz  # 解压</span><br><span class="line">sudo mv ./hadoop-3.2.3/  /hadoop # 将文件夹改名</span><br><span class="line">sudo chown -R hadoop:hadoop ./hadoop # 修改文件权限</span><br><span class="line">vim ~/.bashrc # 修改环境变量,添加如下内容</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop/</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br><span class="line"></span><br><span class="line">source ~/.bashrc # 别忘了source</span><br><span class="line">hadoop version# 验证是否安装成功</span><br></pre></td></tr></table></figure><p>分发：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">xsync hadoop/</span><br></pre></td></tr></table></figure><h2 id="h4">集群配置</h2><p>集群部署参考尚硅谷hadoop教程，如下：</p><div class="table-container"><table><thead><tr><th></th><th style="text-align:center">Master</th><th style="text-align:center">Slave1</th><th style="text-align:center">Slave2</th></tr></thead><tbody><tr><td>HDFS</td><td style="text-align:center">NameNode <br> DataNode</td><td style="text-align:center">DataNode</td><td style="text-align:center">SecondaryNameNode <br> DataNode</td></tr><tr><td>YARN</td><td style="text-align:center">NodeManager</td><td style="text-align:center">ResourceManager <br> NodeManager<br> JobHistoryServer</td><td style="text-align:center">NodeManager</td></tr><tr><td>SPARK</td><td style="text-align:center">Worker<br>HistoryServer</td><td style="text-align:center">Worker</td><td style="text-align:center">Worker</td></tr></tbody></table></div><p><strong>配置文件</strong></p><p>在Master上：</p><h3>workers</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/hadoop/etc/hadoop/workers  # 添加内容如下</span><br></pre></td></tr></table></figure><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525211535417.png" alt="image-20220525211535417"></p><h3>core-site.xml</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure><p>在<code>&lt;configuration&gt;&lt;/configuration&gt;</code>中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://Master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>hdfs-site.xml</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim hadoop-env.sh  # 添加如下环境变量</span><br><span class="line">export JAVA_HOME=jdk安装目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hdfs-site.xml  # 添加如下</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定NameNode的webui端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>Master:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定SecondaryNameNode的webui端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>Slave2:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3>yarn-site.xml</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim yarn-env.sh</span><br><span class="line">export JAVA_HOME=jdk安装目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml   # 添加如下</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>Slave1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3>mapred-site.xml</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim mapred-env.sh</span><br><span class="line">export JAVA_HOME=jdk安装目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mapred-site-xml  # 添加如下</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>分发配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc</span><br><span class="line">xsync hadoop/</span><br></pre></td></tr></table></figure><h2 id="h5">集群启动</h2><p><strong>关闭每台服务器的防火墙：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld  # 临时关闭防火墙</span><br><span class="line">sudo systemctl disable firewalld  # 防止重启后防火墙启动</span><br></pre></td></tr></table></figure><p>在Master上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">hadoop namenode -format  # 如果集群没启动过则先执行此格式化再启动</span><br><span class="line">sbin/start-dfs.sh</span><br><span class="line">jps   # 查看启动进程情况</span><br></pre></td></tr></table></figure><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525204738989.png" alt="image-20220525204738989"></p><p><strong>注：</strong>因为我后续配置了Spark历史服务器的原因所以有HistoryServer进程</p><p>在Slave1上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">sbin/start-yarn.sh</span><br><span class="line">jps  # 查看进程情况</span><br></pre></td></tr></table></figure><blockquote><p>如果报错permission denied 需要在Slave1上配置Master和Slave2的ssh登录，即在Slave1上生成公钥再在Master和Slave2上给公钥授权</p></blockquote><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525204859435.png" alt="image-20220525204859435"></p><p><strong>注：</strong>因为我后续配置了yarn历史服务器的原因所以有JobHistoryServer进程</p><p>在Slave2上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps   # 查看hadoop进程</span><br></pre></td></tr></table></figure><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525204942832.png" alt="image-20220525204942832"></p><p>服务器进程开启情况和预期部署规划一致，证明没有什么问题。</p><p><strong>查看ui界面：</strong></p><p><strong>注：</strong>因为我在windows host文件添加了主机IP映射所以用<code>Master:9870</code>可以访问</p><p><strong>hdfs ui：</strong></p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525205052308.png" alt="image-20220525205052308"></p><p><strong>yarn ui</strong></p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220525210153756.png" alt="image-20220525210153756"></p><p><strong>集群关闭</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">sbin/stop-yarn.sh # 在Slave1上关闭yarn</span><br><span class="line">sbin/stop-dfs.sh # 在Master上关闭hdfs</span><br></pre></td></tr></table></figure><h2 id="h6">报错与处理办法</h2><h3 id="NameNode启动一段时间就挂掉了（hdfs过一段时间就不能访问了）"><a href="#NameNode启动一段时间就挂掉了（hdfs过一段时间就不能访问了）" class="headerlink" title="NameNode启动一段时间就挂掉了（hdfs过一段时间就不能访问了）"></a>NameNode启动一段时间就挂掉了（hdfs过一段时间就不能访问了）</h3><p>jps查看进程信息，发现NameNode没了,cd到<code>/usr/local/hadoop/logs</code>找到namenode的日志查看发下报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR org.apache.hadoop.hdfs.server.namenode.NameNode: RECEIVED SIGNAL 15: SIGTERM</span><br></pre></td></tr></table></figure><p>有以下几种可能解决办法：</p><h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">sbin/hadoop-daemon.sh start namenode</span><br><span class="line">hadoop dfsadmin -refreshNodes</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><p>关闭集群，做如下配置，然后重启hadoop：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim hadoop-env.sh  # 添加如下内容,根据云服务器配置从上往下调，直到NameNode不会挂</span><br><span class="line"></span><br><span class="line">export HADOOP_HEAPSIZE_MAX=1000M</span><br><span class="line">export HADOOP_HEAPSIZE_MIN=100M</span><br><span class="line"></span><br><span class="line">xsync hadoop-env.sh</span><br></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="(3)"></a>(3)</h4><p>删除所有节点hadoop目录下的data和logs文件夹，重新进行格式化，启动集群。（没有办法的办法）不要轻易重新格式化因为这可能造成ID不一致，NameNode启动不了（到时候还得再重新格式化）。</p><h4 id="4-被病毒程序占用系统资源"><a href="#4-被病毒程序占用系统资源" class="headerlink" title="(4) 被病毒程序占用系统资源"></a>(4) 被病毒程序占用系统资源</h4><p>分析：经StackOverflow这是一个系统问题，并不是hadoop的错误，在hadoop运行过程中系统态cpu占用率太高被系统kill掉了，使用<code>top</code>命令查看cpu使用率一度到了96%，在关闭hadoop集群以后，top查看仍有hadoop用户的进程，并且cpu占用率还高达50%。这个进程kill掉后还会自启，并且pid还会改变。所以可以推断这是遭恶意攻击了。</p><p><strong>原因：</strong></p><p>可能是之前在用vpn看StackOverflow时，没关闭vpn的情况下直接用xshell连接过服务器导致ip暴露了</p><p><strong>解决：</strong></p><p>查询正在使用socket的此进程名的直接ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep zapppp  # 通过top查看占用资源的进程COMMAND为zapppp</span><br></pre></td></tr></table></figure><p>经查，查询到的ip是国外的，禁掉ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -s 目标ip -j DROP</span><br></pre></td></tr></table></figure><p>程序进程停了一段时间又重启了，关掉pam后门：</p><p><a href="https://blog.csdn.net/weixin_40412037/article/details/118728788">Linux留后门</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum reinstall pam</span><br></pre></td></tr></table></figure><p>还是要自启，关闭定时服务，删除进程对应的目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">crontab -e        # 注释掉所有内容（每行前加一个#）</span><br><span class="line">ps aux | grep zapppp # 拿到pid</span><br><span class="line">ll /proc/pid    # 找到进程的绝对路径，如下</span><br><span class="line">cd /home/hadoop/.cache_....  </span><br><span class="line">ll              # 查看里面有可执行文件</span><br><span class="line">cd ..</span><br><span class="line">rm -rf .cache../  # 删除整个目录</span><br></pre></td></tr></table></figure><p>目前暂时没有出现那个进程了，cpu占用率也基本是百分之零点几。</p><h3 id="NameNode启动不了"><a href="#NameNode启动不了" class="headerlink" title="NameNode启动不了"></a>NameNode启动不了</h3><h4 id="Connection-time-out-Connection-refused"><a href="#Connection-time-out-Connection-refused" class="headerlink" title="Connection time out / Connection refused"></a>Connection time out / Connection refused</h4><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld  </span><br><span class="line">sudo systemctl disable firewalld </span><br></pre></td></tr></table></figure><h4 id="启动时报错hadoop0-ERROR-Cannot-set-priority-of-datanode-process-2518或者其他端口"><a href="#启动时报错hadoop0-ERROR-Cannot-set-priority-of-datanode-process-2518或者其他端口" class="headerlink" title="启动时报错hadoop0: ERROR: Cannot set priority of datanode process 2518或者其他端口"></a>启动时报错hadoop0: ERROR: Cannot set priority of datanode process 2518或者其他端口</h4><p>开启云服务器全部端口</p><h4 id="NameNode-DataNodeID不一致failed-to-start-namenode"><a href="#NameNode-DataNodeID不一致failed-to-start-namenode" class="headerlink" title="NameNode DataNodeID不一致failed to start namenode"></a>NameNode DataNodeID不一致failed to start namenode</h4><p>所有节点删除hadoop目录的tmp,data和logs文件夹，重新格式化，启动集群。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> 环境搭建 </category>
          
          <category> linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> hadoop </tag>
            
            <tag> 服务器集群 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022一季度总结</title>
      <link href="/2022/05/08/2022%E4%B8%80%E5%AD%A3%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/08/2022%E4%B8%80%E5%AD%A3%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="反思过去，展望未来"><a href="#反思过去，展望未来" class="headerlink" title="反思过去，展望未来"></a>反思过去，展望未来</h2><p>​    在蓝桥杯比赛结束以后就想写一个反思的博客了，虽然自知有很多可写的槽点，但是一直无从下笔；可能是自己觉得可耻吧。今天选修课上闲来无事逛着B站，刷到了北京青年对稚晖君的采访视频，颇有感悟。在关于对感兴趣的知识的学习态度上和稚晖君对比起来，深感惭愧。所以，这篇博客我可不能再拖了，自己的鞋子哪里紧只有自己知道。🔒</p><h4 id="去年和今年自己学习态度对比"><a href="#去年和今年自己学习态度对比" class="headerlink" title="去年和今年自己学习态度对比"></a>去年和今年自己学习态度对比</h4><p>​    去年也就是大二下，大三上的时候，当时在经历了转专业第一学期的低谷以后，自己制定了还算完善的学习计划。每天早出晚归到赵老师的实验室学习，早上早起跑步，晚上有时候也跑，每天到实验室第一件事写每日计划，晚上走的时候核对完成内容，每周写周报，每月写月报（这是在鱼皮那儿学来的学习方法）。虽说不是每日如此，也不是每周每月都写了报告，但这也是大多数时间的状况。所以去年自己的学习情况还算良好，也学到了很多兴趣方向上的知识。每天去实验室学习就和上下班似的，和学长学姐他们也相谈甚欢，倍感充实。</p><p>​    从今年寒假开始自己的状态开始下滑，首先自己已经想好要考研深造，准备在寒假看一看高数，但三分之二时间都花在了琐事上，还有得知自己要延期返校失落了一段时间，虽说每天空闲时间都挺多的，但是出于琐事缠身，倍感无奈，没看几页高数。自己的心态产生了一种微妙的变化，刚返校那一个月由于自己想把算法比赛搞完再全身心的投入到考研复习中，也由于实验室桌子被重新安排了（以前自己在角落里，学自己的不受其他人影响，现在实验室桌子都围成了一圈，老师还时不时开会，自己属实不适应，当然这也是借口）所以一直没去实验室。在寝室的学习状态可想而知，更别说日报，周报这些，早丢一边了。明知在寝室学习状态不好，就不改，就不出去。参加上一届蓝桥杯时，每天去实验室刷题，连续刷了两个月刷了近几年的真题，态度端正，只想尽自己最大努力参加完自己的第一个比较大型的赛事，所以成绩出乎意料。这一届，在寝室刷题，效率不用说，心里还小瞧蓝桥杯，觉得简单；在比赛前20多天才开始刷真题，东刷一道西刷一道，完全没有计划。心里觉得自己比第一次比赛时多刷了这么多到题，成绩至少比上次好吧。但是仔细查看自己从上一次参赛到现在多刷了哪些题，我发现，自己根本没有系统的刷过题，只有在算法队组织的培训上认真刷过题，其次自己下去针对某个专题刷的题的个数也屈指可数。所以在比赛上没什么建树是很正常的事情！一直在四月下旬才正式开始考研复习！</p><p>​    专业知识上：很庆幸自己一直在学习感兴趣的后端知识，但就学习效率并不高。去年学到的东西挺多，但只是停留在会用层面上（而且只是简单的用），比如spring，MySql。虽然一直觉得底层的东西很重要，但是始终没有投入时间精力到上面去，一拖再拖，如今只能留到考完研以后再说了。买了那么多的技术书籍为什么不看？为什么不有计划的看？</p><blockquote><p>空有一腔热血，行思坐想，纸上谈兵不付诸行动，是不会有成果的；必须要干实事，要花时间，实事求是，脚踏实地，才会有所收获！</p><p>将鱼皮那一套 “ 一日一计划，一周一报告，一月一总结 ” 的学习方法继续拿来用上，这样可以看到自己每天做过的任务，可以起到鞭策作用。考研这件事可不能马虎，机会只会交给有准备的人！全力准备，失败也无憾！</p></blockquote><h4 id="看完稚晖君采访有感"><a href="#看完稚晖君采访有感" class="headerlink" title="看完稚晖君采访有感"></a>看完稚晖君采访有感</h4><blockquote><p>“经常有人给我扣什么 ‘天才少年’ 这个帽子，但一方面，我在接受所有采访都强调过，我既不是 ‘天才’ 也不是 ‘少年’ …… 我入门整个行业也是从大学开始的，……但是有一点我可能比大多数人都要做的好的，就是对于这个行业的热爱，特别是作为一个做技术的技术人员，自己是不能有这样的想法的，就认为自己是大神或者说非常优秀的怎样的……保持一个谦卑的心态，知行合一的去学习才是合理的…”</p></blockquote><p>他是行业内公认的大佬，找不到一点骄躁；应该学习他这种谦卑的，知行合一的学习态度；将自己热爱的东西发展成职业是天下最幸福的事了！</p><blockquote><p>“你要自己去寻找最适合你的那条路，有一些是可以称你还年轻去打好基础的，一个是自然科学要学好，就是老师经常说的数理化……另外一个要保持好你的好奇心…然后要善于去弄脏自己的双手……”</p></blockquote><p>回顾自己的学习生涯，初中对数理化都挺感兴趣，成绩都还好，到高中就对数学失去了兴趣可能是数学成绩不好有点想逃避它，甚至很排斥。如今想来真是惭愧啊，如今我更想的是直面它，因为我想了解底层，我必须要跨过它。保持好奇心可以让自己保持探索学习的动力，可以看的更全面！最近一段时间，网上有很多关于摆烂的观点，它或多或少有些影响到我的学习态度，现在正是我奋斗的最佳时机，摆烂是该被唾弃的，因为我六级还没过呢，再摆烂，我不完了吗！</p><blockquote><p>看到稚晖君发论坛求助贴的时候突然联想到自己大一发的第一份求助帖</p></blockquote><p>当时在人工智能协会学习C语言，在人工智能协会指导老师赵俊老师的实验室里，当时在看C语言基础，赵老师给我们留下了一个问题：利用牛顿迭代法写一个C程序解方程的近似解。当时回到寝室，在网上找了点文章看了看，找了一个CSDN的例子程序改了改，一知半解的情况下就迫不及待把答案和程序发给老师！根本没有思考和验证答案的正确性，没有深入理解牛顿迭代的步骤和C的实现原理，草草收场；自己的学习态度一直是浅尝辄止，毫无探索精神啊！俗称：“半灌水” ！惭愧惭愧！</p><p>​    空有广度而没有深度是走不长远的！🔑</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯B组_人物相关性分析</title>
      <link href="/2022/04/01/%E8%93%9D%E6%A1%A5%E6%9D%AFB%E7%BB%84-%E4%BA%BA%E7%89%A9%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90/"/>
      <url>/2022/04/01/%E8%93%9D%E6%A1%A5%E6%9D%AFB%E7%BB%84-%E4%BA%BA%E7%89%A9%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/renwu.png" alt="renwu"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="（1）暴力"><a href="#（1）暴力" class="headerlink" title="（1）暴力"></a>（1）暴力</h3><p>刚开始做时，因为在输入时通过正则表达式分隔字符串比较方便，所以一直在想分割后的办法……</p><p>常规解法：遍历字符串，找到Alice和Bob的起点位置分别放入到一个集合中，分别遍历两个集合，找到K范围内前面匹配的目标的个数。提交然后超时了，不过能过70分的样例哈哈哈哈🤣🤣</p><h3 id="（2）滑动窗口"><a href="#（2）滑动窗口" class="headerlink" title="（2）滑动窗口"></a>（2）滑动窗口</h3><p>同上，先遍历一遍字符串，将Alice和Bob的起始索引分别放到两个集合中</p><p>遍历Alice的集合，利用双指针维护一个指定范围的窗口，找到每个Alice在自身索引$\pm K$范围内的Bob索引个数即可。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> duanqihang</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: suse_QiHang</span></span><br><span class="line"><span class="comment"> * Date: 2022/4/1 15:00</span></span><br><span class="line"><span class="comment"> * Description: 双指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 人物相关性分析_改进 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> K;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> result; <span class="comment">//数据量比较大</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; alist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; blist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">&#x27;A&#x27;</span> &amp;&amp; str.startsWith(<span class="string">&quot;Alice&quot;</span>, i)) alist.add(i);</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">&#x27;B&#x27;</span> &amp;&amp; str.startsWith(<span class="string">&quot;Bob&quot;</span>, i)) blist.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">bl</span> <span class="operator">=</span> <span class="number">0</span>, br = <span class="number">0</span>;<span class="comment">//滑动窗口的左右边界</span></span><br><span class="line">        <span class="keyword">for</span> (Integer integer : alist) &#123;</span><br><span class="line">            <span class="comment">//维护窗口左边界</span></span><br><span class="line">            <span class="keyword">while</span> (bl &lt; blist.size() &amp;&amp; blist.get(bl) &lt; integer - K - <span class="number">3</span>) bl++;</span><br><span class="line">            <span class="comment">//维护窗口右边界</span></span><br><span class="line">            <span class="keyword">while</span> (br &lt; blist.size() &amp;&amp; blist.get(br) &lt;= integer + K + <span class="number">5</span>) br++;</span><br><span class="line">            result += br - bl; <span class="comment">//当前Alice窗口内Bob索引的数量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">read</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        K = Integer.parseInt(read.readLine().trim());</span><br><span class="line">        solve(read.readLine().trim());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>双指针类问题印象较少可能是以前遇到并没有用双指针求解，特此记录！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯B组_后缀表达式</title>
      <link href="/2022/03/24/%E8%93%9D%E6%A1%A5%E6%9D%AFB%E7%BB%84-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/03/24/%E8%93%9D%E6%A1%A5%E6%9D%AFB%E7%BB%84-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/lanqiao2.png" alt="lanqiao2"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h3><blockquote><p>从左到右遍历表达式的每个数字和符号，遇到是数字就进栈，遇到是符号，就将处于栈顶两个数字出栈，进行运算，运算结果进栈，一直到最终获得结果。</p></blockquote><p>中缀表达式的括号优先级体现在后缀表达式中的字符顺序上(隐括号)，如中缀表达式<code>（3+（5*（3+4）））</code>对应的后缀表达式为<code>3534+*+</code>，求后缀表达式的最大值可以通过中缀表达式来求，更容易理解。</p><h3 id="分情况"><a href="#分情况" class="headerlink" title="分情况"></a>分情况</h3><p>（1）: 当M等于0时（没有‘ - ’号），最大值即为所有数之和。</p><p>（2）: 当M大于0，因为给定数有正有负，所以需要尽可能让负数变为正数，可以利用中缀表达式中的括号<code>... - [...]</code>将负数置于括号内，有可能所有数都是正数只是有<code>-</code>运算符而已，所以需要用两个数保证表达式成立，最小损失—-</p><p><code>max...-[min...]</code>，剩下的算符与数值任意组合，结果为正数的放在max后面，为负的放在min后面，最终式子的结果即为最大值。</p><p>所以求最终答案的式子可以表示为 ：MAX- MIN + |a<sub>2</sub>|+ … + |a<sub>n-1</sub>|</p><p>例：</p><blockquote><p>N: 1  M: 2  num[]: 2  -3  4  -5  </p><p>最大值： 4 + 2 - （-3） - [-5 ] </p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 后缀表达式_B组_第十届 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N, M;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">read</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span>[] tep = Arrays.stream(read.readLine().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">                          .mapToInt(Integer::parseInt)</span><br><span class="line">                          .toArray();</span><br><span class="line">        N = tep[<span class="number">0</span>]; M = tep[<span class="number">1</span>];</span><br><span class="line">        num = Arrays.stream(read.readLine().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">                    .mapToLong(Long::parseLong)</span><br><span class="line">                    .toArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (M == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Arrays.stream(num).sum());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Arrays.sort(num);</span><br><span class="line">            <span class="type">long</span> <span class="variable">rel</span> <span class="operator">=</span> num[num.length - <span class="number">1</span>] - num[<span class="number">0</span>];</span><br><span class="line">            System.out.println(</span><br><span class="line">                    rel + Arrays.stream(num, <span class="number">1</span>, num.length - <span class="number">1</span>)</span><br><span class="line">                                .map(Math::abs)</span><br><span class="line">                                .sum()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>今天做另一道真题题：灵能传输 的时候题干提示输入量很大请用快速的读入方式，果断使用缓冲流然后想到stream以前看过想试试看，结果异常好用，这不比遍历字符串数组转换快吗？之前看了那么久的stream流那么多优点而且还是jdk1.8支持的为啥不在比赛中用呢？</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八皇后问题</title>
      <link href="/2022/03/21/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/21/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>百度百科：<a href="https://baike.baidu.com/item/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/11053477?fr=aladdin">八皇后问题</a></p><h3 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h3><p>在8×8格的<a href="https://baike.baidu.com/item/国际象棋/80888">国际象棋</a>上摆放8个<a href="https://baike.baidu.com/item/皇后/15860305">皇后</a>，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。</p><p>这是一个典型的DFS回溯算法应用题，通过解这个题可以明确DFS算法的思路和步骤。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由问题知道每行每列每条对角线都只能有一个皇后，所以需要用数组来记录每种条件的使用情况。其中每行的使用情况可以作为参数放在方法中，并为结束条件提供便利。</p><h3 id="DFS算法基本步骤"><a href="#DFS算法基本步骤" class="headerlink" title="DFS算法基本步骤"></a>DFS算法基本步骤</h3><p>要注意递归结束条件和回溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.结束条件</span></span><br><span class="line">    <span class="keyword">if</span> (...) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">//2.遍历所有可能</span></span><br><span class="line">    fori()&#123;</span><br><span class="line">        <span class="keyword">if</span>(递归条件)&#123;</span><br><span class="line">            <span class="comment">//2.1递归前的操作(改变条件信息)</span></span><br><span class="line">            ...</span><br><span class="line">            dfs();</span><br><span class="line">            <span class="comment">//2.2回溯（也叫恢复现场）</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.其他特殊操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>值得注意的是对角线的维护数组的创建思路</p><blockquote><p>主对角线：<code>row - col</code>规律如图</p></blockquote><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220321202855992.png" alt="image-20220321202855992"></p><blockquote><p>次对角线：<code>row + col</code>规律</p></blockquote><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/image-20220321203244507.png" alt="image-20220321203244507"></p><p>主次对角线各14条，主对角线<code>main_diagonal[row - col + 7]</code>即是对应某条主对角线的使用状态，同理次对角线为<code>sec_diagonal[row + col]</code></p><h2 id="打印所有92种排列的代码"><a href="#打印所有92种排列的代码" class="headerlink" title="打印所有92种排列的代码"></a>打印所有92种排列的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 八皇后问题 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EI</span> <span class="operator">=</span> <span class="number">8</span>, FT = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[EI][EI];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] col = <span class="keyword">new</span> <span class="title class_">boolean</span>[EI];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] main_diagonal = <span class="keyword">new</span> <span class="title class_">boolean</span>[FT];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] sec_diagonal = <span class="keyword">new</span> <span class="title class_">boolean</span>[FT];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= EI)&#123;</span><br><span class="line">            soutMap();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; EI; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (check(n , i))&#123;</span><br><span class="line">                map[n][i] = <span class="number">1</span>;</span><br><span class="line">                act(n, i, <span class="literal">true</span>);</span><br><span class="line">                dfs(n + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//回溯</span></span><br><span class="line">                act(n, i, <span class="literal">false</span>);</span><br><span class="line">                map[n][i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !col[i] &amp;&amp; !main_diagonal[n - i + EI - <span class="number">1</span>] &amp;&amp; !sec_diagonal[n + i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">act</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> i, <span class="type">boolean</span> rel)</span>&#123;</span><br><span class="line">        col[i] = rel;</span><br><span class="line">        main_diagonal[n - i + EI - <span class="number">1</span>] = rel;</span><br><span class="line">        sec_diagonal[n + i] = rel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">soutMap</span><span class="params">()</span>&#123;</span><br><span class="line">        result++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] i : map)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">1</span>) System.out.print(<span class="string">&quot;*&quot;</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> System.out.print(<span class="string">&quot;0&quot;</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++++++++++++++&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;总共有&quot;</span> + result + <span class="string">&quot;种排列方式！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印结果后面部分</span></span><br><span class="line">......</span><br><span class="line">++++++++++++++++++++</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">* <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">++++++++++++++++++++</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">* <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> * <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">++++++++++++++++++++</span><br><span class="line">总共有<span class="number">92</span>种排列方式！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于其他由此问题引出的皇后问题都可以参考此问题代码求解，只需更改特定方法或者参数即可。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Java </category>
          
          <category> 题解 </category>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> DFS </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces_1519D</title>
      <link href="/2022/03/20/CodeForces-1519D/"/>
      <url>/2022/03/20/CodeForces-1519D/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>sources: <a href="https://codeforces.com/problemset/problem/1519/D">CodeForces_1519D</a></p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/des.png" alt="des"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从题意可以看出，翻转后的结果只与翻转那一段区间的乘积的变化有关，所以我只需要知道这段区间翻转前后乘积的差值并与所有翻转区间的差值进行比较即可，最终找到的最大差值加上翻转前的乘积就是最终的答案。因为任意一个区间的差值可以由其子区间求得，所以首选dp。</p><h3 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h3><p>区间<code>i to j</code>的差值由区间<code>i+1 to j-1</code>的差值加上<code>a[i],a[j]</code>翻转前后的乘积变化即可（因为求的是区间<code>i to j</code>变化前后的差值，并没有求此区间的最优策略，所以不用比较）。所以用个中间变量记录最大差值就行，想得到目的区间同理。</p><p>综上得出状态转移方程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + b[i]*a[j] + b[j]*a[i] - a[i]*b[i] - a[j]*b[j];</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="遍历顺序"><a href="#遍历顺序" class="headerlink" title="遍历顺序"></a>遍历顺序</h4><p>如图样例一箭头指出的关系，算<code>dp[i][j]</code>前应当已经算出<code>dp[ i+ 1][j - 1]</code>的值，所以遍历顺序应当从表格中上到下每排或者右到左每列。</p><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/silu2.png" alt="silu2"></p><p>遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上到下</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">        <span class="comment">//do something!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右到左</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="comment">//do something!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>虽然题目说明数组的值没超过int，但是在状态转移方程那儿对于一些特定的数据可能会算错（在<code>a,b</code>数组那儿在改为<code>long</code> 之前样例11算错了而且和答案差别很小就很怪），所以数据类型都统一为<code>long</code>比较稳妥！</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] a;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] b;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[][] dp;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">get_init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">read</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        n = Integer.parseInt(read.readLine());</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        b = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">long</span>[n][n];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(read.readLine());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        sc = <span class="keyword">new</span> <span class="title class_">Scanner</span>(read.readLine());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            b[i] = sc.nextInt();</span><br><span class="line">            sum += a[i] *b[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + b[i]*a[j] + b[j]*a[i] - a[i]*b[i] - a[j]*b[j];</span><br><span class="line">                max = Math.max(max, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum + max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        get_init();</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Java </category>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Git</title>
      <link href="/2022/03/17/%E6%B5%85%E8%B0%88Git/"/>
      <url>/2022/03/17/%E6%B5%85%E8%B0%88Git/</url>
      
        <content type="html"><![CDATA[<h4 id="Git与SVN的区别"><a href="#Git与SVN的区别" class="headerlink" title="Git与SVN的区别"></a>Git与SVN的区别</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">svn是集中式版本控制系统，版本库是集中放在中央服务器的，而工作</span><br><span class="line">的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，</span><br><span class="line">然后工作，工作完成后，需要把自己做完的或推送到中央服务器。集中式版本控</span><br><span class="line">制系统是必须联网才能工作，对网络带宽要求较高。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个</span><br><span class="line">完整的版本库，工作的时候不需要联网了，因为版本都是在自己电脑上，</span><br><span class="line">协同的方法：比如自己再电脑上改变了文件A，这时，你们两之间只需</span><br><span class="line">把各自的修改推送给对方，就可以互相看到对方的修改了。</span><br></pre></td></tr></table></figure><blockquote><p>tips:    资源下载速度较慢解决方案：找国内镜像<br>如：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p></blockquote><h4 id="Git基本理论："><a href="#Git基本理论：" class="headerlink" title="Git基本理论："></a>Git基本理论：</h4><blockquote><p>工作原理：</p></blockquote><p>git本地有三个工作区域：工作目录（working directory），暂存区（stage、index），资源库（respository）。如果在加上远程的仓库（remote directory）就可以分为四个工作区域。文件在四个区域之间的关系如下：</p><p><center><br><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-05-01%20232619.png"></p><blockquote><p>工作目录(工作区)：  工程文件夹<br>Index/Stage(暂存区) ：  临时存放改动<br>Respository(仓库区/本地仓库):   安全存放数据的位置，这里面有你提交到所有版本的数据，其中HEAD指向最新放入仓库的版本<br>Remote:  远程仓库</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">工作流程：</span><br><span class="line"></span><br><span class="line">一：本地提交</span><br><span class="line">0. git init #初始化本地仓库（一次）</span><br><span class="line">1：git add .    #把所有文件加入暂存区</span><br><span class="line">2：git commit -m &quot;Message&quot; #将暂存区文件加入本地仓库</span><br><span class="line">3：git  push origin master  #提交到远程仓库</span><br><span class="line"></span><br><span class="line">二：克隆远程仓库</span><br><span class="line">1： git clone [url]  #克隆仓库地址</span><br></pre></td></tr></table></figure><h4 id="git文件操作"><a href="#git文件操作" class="headerlink" title="git文件操作"></a>git文件操作</h4><blockquote><h1 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h1><p>git status</p><h1 id="查看指定文件状态"><a href="#查看指定文件状态" class="headerlink" title="查看指定文件状态"></a>查看指定文件状态</h1><p>git status [filename]</p></blockquote><p>==忽略文件：==<br>在主目录下建立 .gitignore 文件，文件规则如下：</p><p><center><br><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/1619964657684-gitFIleM.png"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>==配置远程连接==<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在任意目录git bash输入：ssh-keygen 生成本地公钥</span><br><span class="line">#加密生成：ssh-keygen -t rsa[添加链接描述](https:<span class="comment">//www.bilibili.com/video/BV1FE411P7B3?p=12)</span></span><br><span class="line">#生成地址：C:\Users\用户名\.ssh</span><br><span class="line"></span><br><span class="line">将目录中的 .pub（<span class="keyword">public</span>公钥文件）文件内容copy到远程仓库生成公钥的地方</span><br><span class="line"></span><br><span class="line">将仓库clone到本地</span><br></pre></td></tr></table></figure><br>==IDEA使用git==<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建本地idea工程文件目录（最好和克隆的仓库目录在同一级）</span><br><span class="line">将克隆仓库文件夹里面所有内容复制到工程文件下</span><br><span class="line"></span><br><span class="line">#或者直接在仓库目录下创建idea工程</span><br></pre></td></tr></table></figure><br>参考：<a href="https://www.bilibili.com/video/BV1FE411P7B3?p=12">狂神说说git</a></p><h4 id="git分支说明"><a href="#git分支说明" class="headerlink" title="git分支说明"></a>git分支说明</h4><blockquote><p>多分支仓库：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#分支查看</span><br><span class="line">git branch</span><br><span class="line">#新建分支</span><br><span class="line">git branch [branchName]  <span class="comment">//依然停留在目前分支</span></span><br><span class="line">详情：https:<span class="comment">//www.bilibili.com/video/BV1FE411P7B3?p=13</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="git克隆指定分支"><a href="#git克隆指定分支" class="headerlink" title="git克隆指定分支"></a>git克隆指定分支</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master ssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射与注解</title>
      <link href="/2022/03/17/%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/03/17/%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><p>作用：可以被其他程序（如编译器）读取<br>@SuppressWarnings(),镇压警告，含参（看源码）<br>自定义注解：<br>@Target(value={…}):表示注解用在哪些地方<br>@Retention(value={…}):表示注解在哪些地方有效（runtime&gt;class&gt;sources）<br>@Documented:表示是否将注解生成在javadoc中<br>@Inherited:表示子类可以继承注解</p><h3 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h3><p>优点：动态创建对象和编译，灵活<br>缺点：影响性能<br>主要API：java.lang.class<br>一个数据类型只有一个Class，任何类型都有class</p><p>例：JavaSE2021_study\注解与反射\src\com\qihang\Reflection\反射获得Class类.java</p><blockquote><p>Java内存分析</p></blockquote><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/1622268739610-2021-05-29%20141137.png" alt="1622268739610-2021-05-29 141137"></p><blockquote><p>类加载过程</p></blockquote><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/1622268942588-2021-05-29%20141516.png" alt="1622268942588-2021-05-29 141516"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Load:如图</span><br><span class="line">Link：<span class="number">1</span>-验证：确保加载的类符合JVM规范，没有安全方面的问题</span><br><span class="line">      <span class="number">2</span>-准备：正式为类变量（<span class="keyword">static</span>）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配</span><br><span class="line">      <span class="number">3</span>-解析：虚拟机常量池中的符号引用（常量名）替换为直接引用（地址）的过程</span><br><span class="line">Initialize：</span><br><span class="line">      -&gt;执行类构造器&lt;clinit&gt;()方法的过程。类构造器&lt;clinit&gt;()方法是由编译器自动收集类中所有类变量的</span><br><span class="line">      赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造类对象的构造器）</span><br><span class="line">      -&gt;当初始化一个类的时候，如果发现其父类还没初始化，则需要触发器父类的初始化</span><br><span class="line">      -&gt;虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中被正确加锁和同步</span><br></pre></td></tr></table></figure><p>例：JavaSE2021_study\注解与反射\src\com\qihang\Reflection\Test02.java</p><blockquote><p>什么时候发生类的初始化</p></blockquote><p>1.类的主动引用（一定会发生类的初始化）</p><ul><li>当虚拟机启动先初始化main所在的类</li><li>new 一个类的对象</li><li>调用类的静态成员（除了final常量）和方法</li><li>使用java.lang.reflect包中的方法对类进行反射调用</li><li>当初始化一个类，如果父类没有被初始化，则先初始化它的父类</li></ul><p>2.类的被动引用</p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化，如：当通过子类引用父类的静态常量，不会导致子类初始化</li><li>通过数组定义类引用,不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c1=Class.forName(<span class="string">&quot;...&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field[] fields=c1.getFields();<span class="comment">//只能获得public属性</span></span><br><span class="line">fields=c1.getDeclaredFields();<span class="comment">//获得全部属性</span></span><br><span class="line">c1.getMethods();<span class="comment">//获得方法</span></span><br><span class="line">c1.getDeclaredmethods();</span><br><span class="line">c1.getConstructor();</span><br><span class="line">c1.getDeclredConstructor();</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>动态创建对象（反射）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class c1=Class.forName(<span class="string">&quot;...User&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用无参构造创建（保证类里写了无参构造）</span></span><br><span class="line">User user=(User)c1.newInstance();</span><br><span class="line"><span class="comment">//利用指定构造器</span></span><br><span class="line">Constructor con=c1.getDeclaredConstructor(...);</span><br><span class="line">User user=(User)con.newInstande(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射操作方法：</span></span><br><span class="line">User user=(User)c1.newInstance();</span><br><span class="line">Method m=c1.getDeclaredMethod(...);</span><br><span class="line"><span class="comment">//invoke激活并传参</span></span><br><span class="line">m.invoke(user,<span class="string">&quot;...&quot;</span> or ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提升代码效率：</span></span><br><span class="line">method.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SE </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java刷题知识点随笔</title>
      <link href="/2022/03/16/Java%E5%88%B7%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9A%8F%E7%AC%94/"/>
      <url>/2022/03/16/Java%E5%88%B7%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h2 id="Java刷题知识点随笔"><a href="#Java刷题知识点随笔" class="headerlink" title="Java刷题知识点随笔"></a>Java刷题知识点随笔</h2><h4 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h4><p>1.接口方法默认是public abstract的，且实现该接口的类中对应的方法的可见性不能小于接口方法的可见性，因此也只能是public的。</p><h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><blockquote><p>java提供了一个系统级的线程，即垃圾回收器线程。用来对每一个分配出去的内存空间进行跟踪。当JVM空闲时，自动回收每块可能被回收的内存，GC是完全自动的，不能被强制执行。程序员最多只能用System.gc()来建议执行垃圾回收器回收内存，但是具体的回收时间，是不可知的。当对象的引用变量被赋值为null，可能被当成垃圾。</p></blockquote><h4 id="封装的基本类型"><a href="#封装的基本类型" class="headerlink" title="封装的基本类型"></a>封装的基本类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer.valueOf(<span class="number">10</span>) == Integer.valueOf(<span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line">Integer.valueOf(<span class="number">1000</span>) == Integer.valueOf(<span class="number">1000</span>); <span class="comment">// false 为什么呢？</span></span><br></pre></td></tr></table></figure><p><strong>调用Integer的valueOf()方法，如果int在-128和127之间的时候，会直接使用jvm中缓存的数组 Integer（也就是常量池）中的对象引用，否则使用new一个 Integer 对象。</strong>所以导致两个Integer是两个不同的对象了哦。关于<strong>封装类型的比较要用equals哦！</strong></p><h4 id="String里的方法"><a href="#String里的方法" class="headerlink" title="String里的方法"></a>String里的方法</h4><p>String里的返回值为String类型的方法，都需要一个String变量来接收,因为String类型是不可变的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str = str.replace(<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;H&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong><code>&#39;\0&#39;</code>代表ASCII码中的NULL;</strong></p><h3 id="SE"><a href="#SE" class="headerlink" title="SE"></a>SE</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote><p>实例变量/成员变量(<strong>堆区</strong>)：也叫对象变量、类成员变量；从属于类由类生成对象时，才分配存储空间，各对象间的实例变量互不干扰，能通过对象的引用来访问实例变量。<strong>但在Java多线程中，实例变量是多个线程共享资源，要注意同步访问时可能出现的问题。</strong></p><p>静态变量/类变量（<strong>方法区</strong>）：也叫静态变量，是一种比较特殊的实例变量，用static关键字修饰；一个类的静态变量，所有由这类生成的对象都共用这个类变量，类装载时就分配存储空间。一个对象修改了变量，则所以对象中这个变量的值都会发生改变。</p><p>局部变量（<strong>栈区</strong>）：方法中或者某局部块中声明定义的变量或方法的参数被称为局部变量，他们只存在于创建他们的block里（{}之间）无法在block外进行任何操作，如读取、赋值。<strong>在Java多线程中，每个线程都复制一份局部变量，可防止某些同步问题发生。</strong></p></blockquote><p><img src="https://pic-home.oss-cn-beijing.aliyuncs.com/img/1631103800490-%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-09-08%20202155.png" alt="1631103800490-屏幕截图 2021-09-08 202155"></p><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><strong>与运算符（&amp;）：</strong>两侧既可以是boolean表达式也可以是数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>&amp;<span class="number">7</span>  </span><br><span class="line">    <span class="number">4</span>:  <span class="number">0000</span> <span class="number">0100</span> </span><br><span class="line">   &amp;<span class="number">7</span>:  <span class="number">0000</span> <span class="number">0111</span></span><br><span class="line">   ==:  <span class="number">0000</span> <span class="number">0100</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>短路与（&amp;&amp;）</strong>：两侧只能是boolean表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span>&lt;<span class="number">2</span> &amp;&amp; i++ &lt; <span class="number">2</span>)&#123;</span><br><span class="line">    i = i+<span class="number">1</span>;</span><br><span class="line">    Sustem.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出： i = 1;</span></span><br><span class="line"><span class="comment">//因为短路与只要左侧为false后面第二个表达式就不会计算，而&amp;运算符前后两个表达式都会计算</span></span><br></pre></td></tr></table></figure><p><strong>或运算符（|）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>|<span class="number">9</span></span><br><span class="line">    <span class="number">5</span>: <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line">   |<span class="number">9</span>: <span class="number">0000</span> <span class="number">1001</span></span><br><span class="line">   ==: <span class="number">0000</span> <span class="number">1101</span>(<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><strong>短路或（||）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对比&amp;和&amp;&amp;的区别同理。</span></span><br></pre></td></tr></table></figure><p><strong>异或运算（^）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>^<span class="number">15</span></span><br><span class="line">    <span class="number">7</span>: <span class="number">0000</span> <span class="number">0111</span></span><br><span class="line">   <span class="number">15</span>: <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">   ^=: <span class="number">0000</span> <span class="number">1000</span>(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><strong>取反运算（~）:</strong> 按位取反</p><p><strong>左移：&lt;&lt;</strong>（等价于*2）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>&lt;&lt;<span class="number">2</span> : 左移两位（*<span class="number">2</span>*<span class="number">2</span>），空位补<span class="number">0</span></span><br><span class="line">    <span class="number">0000</span> <span class="number">1100</span> -&gt; <span class="number">0011</span> <span class="number">0000</span>(<span class="number">48</span>)</span><br></pre></td></tr></table></figure><p><strong>右移：&gt;&gt;（等价于除2）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>&gt;&gt;<span class="number">2</span> : 右移两位（/(<span class="number">2</span>*<span class="number">2</span>)）,空位：负数补<span class="number">1</span>，正数补<span class="number">0</span>。</span><br><span class="line">    <span class="number">0000</span> <span class="number">1100</span> -&gt; <span class="number">0000</span> <span class="number">0011</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>无符号右移：&gt;&gt;&gt;</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在移动位的时候与右移运算符的移动方式一样的，区别只在于补位的时候不管是负数还是正数，都补<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SE </category>
          
          <category> 随笔 </category>
          
          <category> Java </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SE </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
